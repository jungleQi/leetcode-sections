算法是程序的灵魂

PART 1:
O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n)< O(n!)< O(n^n)
1.O(n)
一般情况下，程序中没有循环的都可以认为是常数函数，时间复杂度就是O(1)。
2.O(logn)
当存在while函数时，通常就是对数函数，这个循环的时间复杂度就是 O(logn)。
3.O(n^m)
当存在双层for循环的时候，即把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n?) 了，以此类推，三层循环就是O(n^3)。
4.O(nlogn)
将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logn)，也就是了O(nlogn)，就是for循环中有while循环。

一般的像O(n^3)、O(2^n)、O(n!)这样的函数，除非时很小的n的值，否则哪怕n只是100，都是噩梦般的运行时间，所以这种不切实际的算法时间复杂度，
我们不去讨论。

PART 2:
1. 找到执行次数最多的语句
2. 计算语句执行次数的数量级
3. 用大O来表示结果

取决于执行次数最多的语句，如当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的
