一、并查集核心结构：
1.并查集核心结构是树，通过parent[i] = j来维护，parent可以是list也可以是dict
2.初始状态下，每个元素都是以自己为父节点，独立的一棵树
3.parent[i] = i为根节点，所以parent里面可能包括多颗树

二、并查集能解决啥问题：
1.可以："Union Find可用于解决集合相关问题，如判断某元素是否属于集合、两个元素是否属同一集合、求解集合个数等
2.不可以：注意，并查集所涉及的动态连通性只是考虑“是否连通”这一二值判别问题，而不涉及连通的路径到底是什么，
如果需要的功能不仅仅是检测两个节点是否连通，还需要在连通时得到具体的路径，那么就需要用到别的算法了，比如DFS或者BFS
！！！ 此法适合undirect graph, 不适合direct graph

三、并查集问题解决套路：
并查集问题本身的代码结构非常固定，关键在于如何识别一个问题是否可以用并查集来解决
1. parent的初始化，一般每个节点或者元素，是一个独立的树，自己是自己的父节点parent[node] = node
2.find(node)采用递归实现
3.union(node1, node2)内部采用find实现，然后执行parent[root_node1] = root_node2，将两个集合合并成一个结合

四、最后的子集合点数：
1.通过遍历parent, 判断parent[i] == i的个数
2.初始化子集合为N，每次union，N自减1，所有合并完毕后，N就是最终子集合个数

code pattern:
#find可以通过循环或者递归，递归更加简练
#查找的过程，会整理set内部关系,即将当前i直接挂在root下面，然后返回父节点，也就是根节点

#如果父子只是连接关系，不需要加入路径权值，就直接将返回值赋给parent[i]
    def find(i):
        if i != self.parent[i]:
            self.parent[i] = self.find(self.parent[i])
        return self.parent[i]

#否则，就需要在循环中得到返回值后，对返回值做权值叠加，然后赋给parent[i]
    def find(x):
        p, xr = parent.setdefault(x, (x, 1.0))
        if p != x:
            r, pr = find(p)
            parent[x] = r, pr * xr
        return parent[x]

#union可以直接合并两个set，也可以按照rank来合并
直接合并：
    def union(self, i, j):
        ri = self.find(i)
        rj = self.find(j)
        self.parent[ri] = rj

#基于parent[i] = j，一个并查集中的所有元素的父节点不一定都是根节点，有的节点层级可能是3，有的可能是2
#最后统计并查集的子集个数时，有多种办法：
    1. 遍历所有节点，node == parent[node]的总数，就是子集总数
    2. 所有N个节点都参与，UF中每次被union一次，就N -= 1，最后N就是子集总数


