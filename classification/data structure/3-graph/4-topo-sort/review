一、定义：
    对于任何有向图而言，其拓扑排序为其所有结点的一个线性排序（对于同一个有向图而言可能存在多个这样的结点排序）。
该排序满足这样的条件——对于图中的任意两个结点u和v，若存在一条有向边从u指向v，则在拓扑排序中u一定出现在v前面。
    当且仅当一个有向图为有向无环图（directed acyclic graph，或称DAG）时，才能得到对应于该图的拓扑排序。
    不适合解决undirected graph(acyclic or cyclic)

二、能解决的问题：
拓扑排序主要用来解决有向图中的依赖解析（dependency resolution）问题。
2.1 有前后依赖/顺序关系的全节点排序(bfs)
2.2 图中最长前后序关联链路长度(bfs)
2.3 判断是否存在有向环：根据入度+bfs(queue)遍历结果，判断是否遍历完所有节点，如果存在有向环，环上的节点不会进入queue，不会被访问到

三部曲：
1. 构造node:[node1, node2,..] , 即邻接表(非邻域矩阵)
2. 计算出indegree
3. topo sort(by bfs)
    3.1 遍历完整个有向图，得到遍历的节点个数，只需两层循环，第一层deque非空，第二层遍历节点的后序节点
    3.2 遍历完整个有向图，得到遍历的最长路径，即最深层数，需要三层循环，第一层deque非空且递增层数，
        第二层将deque(当前层)遍历完，即popleft的次数是当前len(deque)，遍历它们后序节点追加到deque，用于下一层遍历

注意坑：
1.在统计indegree时，容易重复计数，导致某个节点的入度变大，导致后续排序结果错误

心得：
对于有向图，采用indegree+bfs遍历完后，会有两中可能：
1.有环：环上的节点遍历不到
2.无环：所有的节点都能遍历到，并且按照topo顺序排列

if b not in graph[c] 会让graph生成 'c': []

