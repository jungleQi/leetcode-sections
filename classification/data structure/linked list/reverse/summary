一、逆转需要的几个控制性节点：
1.新增dummy头部节点：方便逆转之后返回头结点dummy.next
2.设立prev，用于指向当前的head节点，即prev.next == head

二、逆转的算法：

核心步骤：
key-1 确定好需要交换的头节点(head)的前序area-prev节点，便于重新链接起 前半区间和逆转区间
key-2 在逆转区间每次交换两个节点，在结束该区间reverse时，确定newHead，便于重新链接起 逆转区间和后半区间
key-3 确定新的area-prev和head，prepare for next area's reverse

1.迭代
1.1 确定好终止reverse的判断条件，开始循环迭代
1.2 逆转一个节点需要三步：
    cur.next, node-prev, cur = node-prev, cur, cur.next

2.递归
2.1 确定好终止recursion的判断条件，返回reverse前的尾结点，也就是reverse后的头节点
    层层返回，返回过程对该返回节点不做任何额外处理
2.2 逆转前后两个节点只需两步操作，干净利落：
    head.next.next = head
    head.next = None