一.回溯法算法思想：
定义：
    回溯法(探索与回溯法)是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，
这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。

1、回溯法适用：有许多问题，当需要找出它的解集（全部解）或者要求回答什么解是满足某些约束条件的最优解时，往往要使用回溯法。
2、有组织的穷举式搜索：回溯法的基本做法是搜索或者有的组织穷尽搜索。它能避免搜索所有的可能性。即避免不必要的搜索。这种方法适用于解一些组合数相当大的问题。
3、搜索解空间树：回溯法在问题的解空间树中，按深度优先策略，从根结点出发搜索解空间树。算法搜索至解空间树的任意一点时，先判断该结点是否包含问题的解。
   如果肯定不包含（剪枝过程），则跳过对该结点为根的子树的搜索，逐层向其祖先结点回溯；否则，进入该子树，继续按深度优先策略搜索。

二、回溯法的套路：
    回溯法就从初始节点（解空间树的根节点）出发，以深度优先的方式搜索整个解空间。这个开始节点就成为一个活节点，同时也成为当前的扩展节点。
    在当前扩展节点处，搜索向纵深方向移至一个新节点。这个新节点就成为一个新的活节点，并且成为当前的扩展节点。
    如果在当前的扩展节点处不能再向纵深方向搜索，则当前的扩展节点就成为死节点。
    此时应往回移动（回溯）至最近一个活节点处，并使这个活节点成为当前扩展节点。
    如此继续。
    回溯法就是以这种工作方式递归地在解空间中搜索，直至找到要求的解或解空间中已无活节点时为止

三、回溯法本质：
    为了避免生成那些不可能产生最佳解的问题状态，要不断地利用限界函数(bounding function)来处死(剪枝)那些实际上不可能产生所需解的活结点，
以减少问题的计算量。具有限界函数的深度优先生成法称为回溯法。（回溯法 = 穷举 +　剪枝）。

===========================================

1.完成递归或者回溯：
    如果有并行的，需要for循环，多次自我调用
    如果是串行的，只需要变化传入参数的情况下，单层自我调用
    如果既有并行又有串行，就if else 分支判断，对并行的部分用for循环，多次自我调用；对串行的部分，变化入参，单次调用


code pattern:
    def backtrack(candidate):
        if find_solution(candidate):
            output(candidate)
            return

        # iterate all possible candidates.
        for next_candidate in list_of_candidates:
            if is_valid(next_candidate):
                # try this partial candidate solution
                place(next_candidate)
                # given the candidate, explore further.
                backtrack(next_candidate)
                # backtrack
                remove(next_candidate)

1.Unlike brute-force search, in backtracking algorithms we are often able to determine if a partial solution
candidate is worth exploring further (i.e. is_valid(next_candidate)), which allows us to prune the search zones

2.There are two symmetric functions that allow us to mark the decision (place(candidate))
and revert the decision (remove(candidate)).