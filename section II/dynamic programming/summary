https://cloud.tencent.com/developer/article/1453737

#状态dp[i]，并不一定是指全局的nums，在第i个nums[i]时，切合题意的那个中间状态；
#可能只有依据所求解的状态，引申dp[i]的含义，才能递推出最后的解
#这就是状态的定义，有的状态定义比较浅显，依据题意直接定;有的需要挖掘，难度稍微大一点


基本思想与策略:
    基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了实用的信息。
    在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其它局部解。依次解决各子问题，最后一个子问题就是初始问题的解

    与分治法最大的区别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的
   （即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）

求解的基本步骤:
(1)划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。
(2)确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。
(3)确定决策并写出状态转移方程：状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。
(4)寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。

一般，只要解决问题的阶段、状态和状态转移决策确定了，就可以写出状态转移方程（包括边界条件）。

https://leetcode.com/problems/unique-paths-ii/
https://leetcode.com/problems/unique-substrings-in-wraparound-string/
https://leetcode.com/problems/last-stone-weight-ii/
https://leetcode.com/problems/word-break/
https://leetcode.com/problems/cheapest-flights-within-k-stops/
https://leetcode.com/problems/unique-binary-search-trees-ii/
https://leetcode.com/problems/longest-turbulent-subarray/
https://leetcode.com/problems/knight-probability-in-chessboard/
https://leetcode.com/problems/push-dominoes/
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/
https://leetcode.com/problems/target-sum/
https://leetcode.com/problems/largest-sum-of-averages/
https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/
https://leetcode.com/problems/delete-and-earn/
https://leetcode.com/problems/maximum-length-of-repeated-subarray/
https://leetcode.com/problems/2-keys-keyboard/
https://leetcode.com/problems/video-stitching/
https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/
https://leetcode.com/problems/unique-binary-search-trees/
https://leetcode.com/problems/largest-plus-sign/
https://leetcode.com/problems/unique-paths/
https://leetcode.com/problems/minimum-path-sum/
https://leetcode.com/problems/integer-break/
https://leetcode.com/problems/longest-palindromic-subsequence/
https://leetcode.com/problems/partition-to-k-equal-sum-subsets/
https://leetcode.com/problems/minimum-score-triangulation-of-polygon/
https://leetcode.com/problems/filling-bookcase-shelves/
https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/
https://leetcode.com/problems/longest-string-chain/
https://leetcode.com/problems/maximum-length-of-pair-chain/
https://leetcode.com/problems/combination-sum-iv/
https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/
https://leetcode.com/problems/stone-game-ii/
https://leetcode.com/problems/minimum-falling-path-sum/
https://leetcode.com/problems/numbers-with-same-consecutive-differences/
https://leetcode.com/problems/range-sum-query-2d-immutable/
https://leetcode.com/problems/ones-and-zeroes/
https://leetcode.com/problems/knight-dialer/
https://leetcode.com/problems/predict-the-winner/
