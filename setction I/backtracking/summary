#调用栈近似tree，每个node认为是累积的当前路径的当前结果
#backtracking：当前调用分支 返回 到上一层调用，重新遍历父节点(同一level)其他路径的情况

回溯代码分两部分：
1.结束向前迭代的各种返回
2.向前递归调用时，记录所有可能的遍历路径 or 知否存在的判断 有所区别
a.记录所有可能的遍历路径：依次调用 当前节点的所有子节点，不做成功/失败判断的结束返回
b.知否存在的判断:如果当前节点的某个子节点判定成功，就返回，没必要递归它的兄弟节点

技巧：
1.遍历存在主线，主线是递归调用的层级，确定层级是多少，遍历完所有层级得到完整的正确结果
2.主线上每一个level，是多个并列的可能性路径，可能对每个可能路径都需要遍历的话。并列路径少，就先后调用几次递归函数；并列路径多，就用循环的方式
调用递归函数，只是递归函数里的实参根据路径的不同，做相应调整